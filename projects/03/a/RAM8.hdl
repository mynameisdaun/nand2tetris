// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * CHIP Register {
 *    IN in[16], load;
 *    OUT out[16];
 *  }
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way16(in = in, sel = address,
    a = r0, b = r1, c = r2, d = r3,
    e = r4, f = r5, g = r6, h = r7
    );
    DMux8Way(in = load, sel = address,
    a = l0, b = l1, c = l2, d = l3,
    e = l4, f = l5, g = l6, h = l7
    );
    Register(in = r0, load = l0, out = register0);
    Register(in = r1, load = l1, out = register1);
    Register(in = r2, load = l2, out = register2);
    Register(in = r3, load = l3, out = register3);
    Register(in = r4, load = l4, out = register4);
    Register(in = r5, load = l5, out = register5);
    Register(in = r6, load = l6, out = register6);
    Register(in = r7, load = l7, out = register7);
    Mux8Way16(
    a = register0, b = register1, c = register2, d = register3,
    e = register4, f = register5, g = register6, h = register7,
    sel = address,
    out = out);
}
